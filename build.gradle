plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'com.autonomousapps.dependency-analysis' version '0.71.0'
    id 'dev.jacomet.logging-capabilities' version '0.9.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

repositories {
//    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'com.github.junrar:junrar:7.4.0'
    api 'org.apache.commons:commons-vfs2:2.8.0'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'commons-io:commons-io:2.8.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
}

group = 'com.github.junrar'
description = 'Apache Commons VFS RAR provider'


sourceCompatibility = '1.8'
targetCompatibility = '1.8'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Java Unrar'
                description = "${description}"
                url = 'https://github.com/junrar/junrar'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/junrar/commons-vfs-rar/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'gotson'
                        name = 'Gauthier Roebroeck'
                    }
                }
                scm {
                    url = 'https://github.com/junrar/commons-vfs-rar.git'
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.wrapper {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.ALL
}

test {
    useJUnitPlatform()
}

checkstyle {
    configFile = file("${rootDir}/checkstyle.xml")
    toolVersion = '8.29'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
tasks.named("dependencyUpdates").configure {
    // disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}